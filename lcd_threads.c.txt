#include <LiquidCrystal.h>
#include <Thread.h>

/*

LCD 1602
Uno/Micro

LCD       UNO/Micro

Vss <- GND (Power line)
Vdd <- +5V (Power line)
V0  <- Pot2 (50KOhm), Pot1,3 -> GND
RS  <- 7  Digital
RW  <- GND
E   <- 8  Digital
D0
D1
D2
D3
D4  <- 9  Digital
D5  <- 10 Digital
D6  <- 11 Digital
D7  <- 12 Digital
A   <- +5V (Backlight)
K   <- GND (Backlight)

Light Sensor 1 -> GND
Light Sensor 2 -> A0
       2 -> R10K -> +5V 


AM2320 Temp & Humidity sensor, use Adafruit_unified_sensor & Adafruit_AM2320 libraries.
Connect to I2C

+-------+
| . . . |
| . . . |
| . . . |
| . . . |
| . . . |
+-------+
 1 2 3 4
						   i2c if:
1. VDD:  Power supply (3.1V~5.5V)  		-> 5v
2. SDA:  Serial data, bi-directional port	-> SDA
3. GND:  Ground					-> GND
4. SCL:  Serial clock, input port		-> SCL


BMP180 GY68 Digital Barometric Pressure Sensor Board Module compatible with BMP085

+-------+
| . . . |
| . . . |
| . . . |
| . . . |
| . . . |
+-------+
 1 2 3 4
						   i2c if:
?. VDD:  Power supply (3.1V~5.5V)  		-> ??
?. SDA:  Serial data, bi-directional port	-> ??
?. GND:  Ground					-> ??
?. SCL:  Serial clock, input port		-> ??


*/

LiquidCrystal lcd(7, 8, 9, 10, 11, 12);

Thread taskOne = Thread();  // thread for task one, print time in seconds since controller start
Thread taskTwo = Thread();  // thread for task two, animation for ">" moving in the first LCD row between
                            // positions 9 and 15

typedef struct {
  char symbol;// = ' ';
  bool dir;// = false;
  int x_begin;// = 9;
  int x_end;// = 15;
  int x_old;// = 12;
  int x_coord;// = 12; 
} Arrow;

Arrow animatedArrow[] = {' ', false, 9, 15, 12, 12};

void taskOneFunc(){
  // Printing seconds since restart on the first row
  lcd.setCursor(5, 0);
  lcd.write("    ");
  lcd.setCursor(5, 0);
  lcd.print(millis() / 1000);
}

void taskTwoFunc(){
  // Running arrow ">" or "<"
  //Arrow animatedArrow;
  arrowStep(animatedArrow);
  delay(120);
}

void arrowStep(Arrow *self){
  // function performs one single movement of the character ">" or "<"
  // depending on its current movement direction
  
  if(self->dir)
    self->symbol = '>';
  else
    self->symbol = '<';
  
  // update LCD 
  lcd.setCursor(self->x_old, 0);
  lcd.write(" ");
  lcd.setCursor(self->x_coord, 0);
  lcd.write(self->symbol);

  // update current coordinate and direction
  if (self->x_coord == self->x_end || self->x_coord == self->x_begin)
    self->dir = !self->dir;
  self->x_old = self->x_coord;
  if (self->dir)
    self->x_coord++;
   else
    self->x_coord--;

  // debug info on the second row: current coordinate and moving direction
  lcd.setCursor(5, 1);
  lcd.print(self->x_coord);
  lcd.print('=');
  lcd.print(self->dir);
}

void setup(){
  // setup function, runs once in the beginning
  
  lcd.begin(16, 2);
  lcd.setCursor(0, 0);
  lcd.write("Sec: ");

  taskOne.onRun(taskOneFunc);
  taskTwo.onRun(taskTwoFunc);

  taskOne.setInterval(1000);  // call taskOne every 1000 ms
  taskTwo.setInterval(100);   // call taskTwo every 100 ms
}

void loop(){
  // main loop
  
  if (taskOne.shouldRun())
    taskOne.run();

  if (taskTwo.shouldRun())
    taskTwo.run();
}
